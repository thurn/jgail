package ca.thurn.uct.algorithm;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ca.thurn.uct.core.Action;
import ca.thurn.uct.core.Player;

/**
 * API - convert to interface?
 * 
 * getActions()
 * void perform(action)
 * void undo(action)
 * State<A> copy()
 * void initialize(State<A> state)
 * isTerminal()
 * getCurrentPlayer()
 * getWinner()
 * playerAfter(Player)
 * 
 * - Action pickers should take state representation to use as an argument
 * - A given representation is also used as the "canonical" game state
 * - Should be able to get an empty state and initialize it from the canonical
 *   state.
 * - Algorithms like UCT that need to store per-node data should have a
 *   separate data structure which supports them (which forms a tree of
 *   actions)
 * - Statistical significance for tournaments would be cool
 * - Unit tests
 * - Integration tests - encode ordering of different algorithms.
 */
public abstract class State<A extends Action> {  

  /**
   * The mode of operation for {@link State#perform(Action, PerformMode)}. A value of
   * "TRANSFER_STATE" indicates that the various fields of the state should be cached for each child
   * state and transfered to new states generated by the same Action. A value of "IGNORE_STATE" will
   * not do this - it will simply return the value of {@link State#performInternal(Action)}.
   */
  public static enum PerformMode {
    TRANSFER_STATE,
    IGNORE_STATE,
    RETURN_CACHED
  }
  
  public static long nextIdentifier = 0;
  
  public List<A> actions;
  public int stateVisits;
  public Map<Action, Integer> actionVisits;
  public Map<Action, Double> actionRewards;
  public Map<A, State<A>> performCache;
  public long identifier;
  public Map<A, Long> childIdentifiers;

  
  public static synchronized long newIdentifier() {
    return nextIdentifier++;
  }
  
  public State() {
    this.stateVisits = 0;
    this.actionVisits = new HashMap<Action, Integer>();
    this.actionRewards = new HashMap<Action, Double>();
    this.performCache = new HashMap<A, State<A>>();
    this.childIdentifiers = new HashMap<A, Long>();
  }
  
  public <K,V> V getWithDefault(Map<K, V> map, K key, V defaultValue) {
    V ret = map.get(key);
    if (ret == null) {
        return defaultValue;
    }
    return ret;
  }
  
  /**
   * Sets the legal actions from this state. This should be called early in a state's life cycle,
   * ideally from the constructor.
   */
  public void setActions(List<A> actions) {
    this.actions = actions;
  }

  /**
   * Returns actions available from this state.
   */
  public List<A> getActions() {
    return actions;
  }
  
  public State<A> copy() {
    State<A> result = copyInternal();
    result.actionRewards = new HashMap<Action, Double>(actionRewards);
    result.actionVisits = new HashMap<Action, Integer>(actionVisits);
    result.stateVisits = stateVisits;
    result.performCache = new HashMap<A, State<A>>(performCache);
    result.childIdentifiers = new HashMap<A, Long>(childIdentifiers);
    return result;
  }
  
  /**
   * Returns a copy of this state. It's OK to re-use immutable objects in the
   * resulting state, but mutable ones should be deep-copied.
   */
  protected abstract State<A> copyInternal();

  /**
   * Returns the average payoff of taking the provided action from this
   * state, potentially based the average historical payoff. This is called
   * Q in the original UCT paper.
   */
  public double averagePayoff(A action) {
    // Estimate payoff of an action based on the win rate
    if (getWithDefault(actionVisits, action, 0) == 0) return 0.0;
    return getWithDefault(actionRewards, action, 0.0) / getWithDefault(actionVisits, action, 0);
  }

  /**
   * Marks this state and action as visited, and then stores the reward that
   * was obtained by selecting this action.
   */
  public void addReward(A action, double reward) {
    stateVisits++;
    actionVisits.put(action, getWithDefault(actionVisits, action, 0) + 1);
    actionRewards.put(action, getWithDefault(actionRewards, action, 0.0) + reward);
  }
  
  /**
   * Set any shared mutate state back to how it was when prepareForSimulation
   * was called. Note that it is usually NOT sufficient to simply assign a new
   * value to a field here, because multiple State objects will have a
   * reference to that state. You instead need to mutate the shared reference
   * back to the original state.
   */
  public void reset() {
  }
  
  public void prepareForSimulation() {
  }

  /**
   * Returns the number of times this state has been visited in this
   * simulation. This is called N_{s,d} in the original UCT paper.
   */
  public int numberOfTimesVisited() {
    return stateVisits;
  }

  /**
   * Returns the number of times the provided action has been selected when
   * this state was visited. This is called N_{s,a,d} in the original UCT
   * paper.
   */
  public int numberOfTimesActionSelected(A action) {
    return getWithDefault(actionVisits, action, 0);
  }

  /**
   * Returns the resulting state after performing the supplied action. You
   * should assume that the provided action will be a legal one.
   * Refer to {@link PerformMode} for documentation of the possible
   * PerformModes.
   */
  public State<A> perform(A action, PerformMode mode) {
    if (mode == PerformMode.RETURN_CACHED) {
      Long identifier = childIdentifiers.get(action);
      if (identifier == null) {
        identifier = newIdentifier();
        childIdentifiers.put(action, identifier);
      }
      State<A> result = performInternal(action);
      result.identifier = identifier;
      return result;
    } else if (mode == PerformMode.IGNORE_STATE) {
      return performInternal(action);
    } else if (mode == PerformMode.TRANSFER_STATE) {
      State<A> result = performInternal(action);
      State<A> cached = performCache.get(action);
      if (cached != null) {
        // Transfer reward metadata to new state
        result.stateVisits = cached.stateVisits;
        result.actionVisits = cached.actionVisits;
        result.actionRewards = cached.actionRewards;
        result.performCache = cached.performCache;
      }
      performCache.put(action, result);
      return result;
    } else {
      throw new RuntimeException("Unknown PerformMode: " + mode);
    }
  }
  
  public long getIdentifier() {
    return identifier;
  }
  
  protected abstract State<A> performInternal(A action);

  /**
   * Undoes the provided action, returning the resulting state.
   */
  public abstract State<A> unperform(A action);
  
  /**
   * Returns the player whose turn will be after the provided player.
   */
  public Player playerAfter(Player player) {
    return player == Player.PLAYER_ONE ? Player.PLAYER_TWO :
      Player.PLAYER_ONE;
  }

  /**
   * Returns whether or not this state is terminal. 
   */
  public abstract boolean isTerminal();
  
  public abstract Player getCurrentPlayer();
  
  public abstract Player getWinner();
}
